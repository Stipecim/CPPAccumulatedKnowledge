"inline" is more like "static" or "extern" than a directive telling the compiler to inline your functions, 
"extern, static, inline" are linkage directives, used almost exclusivly by the liker not the compiler.
It is said that "inline" hitns to the compiler that the function should be inlined. That may have been true in 1998, but a
decade later the compiler needs no such hints. Not to mention humans are ussualy wrong when it comes to optimising code,
so most compilers flat out ignore the hint.

- "static" the variable/function name cannot be used in other translation units. Linker needs to make sure it doesn't 
accidentally use a statically defined varable/function from another translation unit.

- "extern" use this variable/function name in this translation unit but don't complain if it isn't defined. The linker will
sort it out and make sure all the code that tried to use some extern symbol has its adress.

- "inline" this function will be defined in multiple translation units. The linker needs to make sure all translation
units use a single instance of the variable/function.

Declaring templates inline is pointless, as they have the linkage semantics of inline already. However, explicit specialisation
and instantiation of templates require inline to bi used.